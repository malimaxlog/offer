思路：二维数组是有序的，从右上角来看，向左数字递减，向下数字递增。
      因此从右上角开始查找，
      当要查找数字比右上角数字大时，下移；
      当要查找数字比右上角数字小时，左移；
      如果出了边界，则说明二维数组中不存在该整数。
public class Solution {
    public boolean Find(int target, int [][] array) {
        if(array.length==0 || array[0].length==0)
            return false;
        int m = array[0].length-1;
        int n = 0;
        int temp = array[n][m];
        while(target != temp){
            if(m>0 && n<array.length-1){
                if(target>temp){
                    n = n + 1;
                }else if(target<temp){
                    m = m - 1;
                }
                temp = array[n][m];
            }else{
                return false;
            }
        }
        return true;
    }
}

public class Solution {
    public boolean Find(int target, int [][] array) {
        if(array.length == 0 || array[0].length == 0) {
            return false;
        }
        int m = array.length,n = array[0].length;
        int row = 0,col = n - 1;
        while(col >= 0 && row < m) {
            int temp = array[row][col];
            if(target > temp) {
                row++;
            } else if(target < temp) {
                col--;
            } else {
                return true;
            }
        }
        return false;
    }
}

法二： 遍历每行，判断target是否处于某行的array[i][0]和array[i][array[i].length - 1] 的区间中，再二分法判断该数是否存在该行中。
public class Solution {
    public boolean Find(int target, int [][] array) {
        for(int i = 0;i<array.length;i++) {
            if(array[i].length == 0) {
                return false;
            }
            if(target >= array[i][0] && target <= array[i][array.length - 1]) {
                int start = 0,end = array[i].length - 1;
                while(start + 1 < end) {
                    int mid = (end - start)/2 + start;
                    if(array[i][mid] > target) {
                        end = mid;
                    } else if(array[i][mid] < target) {
                        start = mid;
                    } else {
                        return true;
                    }
                }
                if(array[i][start] == target) {
                    return true;
                }
                if(array[i][end] == target) {
                    return true;
                }
            }
        }
        return false;
    }
}
